[서비스]
@Injectable(): 모듈에 주입 가능해지는 설정. a decorator that marks a class as a provider. 
: 특정 서비스를 꾸미고, 해당 서비스를 모듈의 providers로 주입. (Dependency Injection)
  => 컨트롤러에서 사용 가능. constructor에 인자로 설정하면 컨트롤러 내에서 사용 가능.
==================================
[서비스 - TypeORM: @InjectRepository]
@Injectable()
export class PodcastService {
  constructor(
    @InjectRepository(Podcast)
    private readonly podcastRepo: Repository<Podcast>,
  ) {}
=================
@Module({
  imports: [TypeOrmModule.forFeature([Podcast])], // Service에 @InjectRepository할 entity들 가져오기.
  providers: [PodcastService, PodcastResolver],
})
export class PodcastModule {}
================================================================================
[엔티티 생성]
@Entity: 클래스를 TypeORM 엔티티로 설정. (TypeORM 관련하여 클래스에 설정하는 유일한 데코레이터?)
       : @Column(), @OneToMany(), @PrimaryGeneratedColumn() 등을 각 필드에 설정. 

@ObjectType: 클래스를 GraphQL 엔티티로 설정. GraphQL 스키마에 @ObjectType의 entity 생성. 
           : extends CoreEntity하는 경우, CoreEntity & 상속받는 엔티티 양쪽에 @ObjectType 추가 필요.
           : @Field((type)=>String) 등을 각 필드에 설정.

@InputType: DTO. MappedTypes를 통해 GraphQL 엔티티로 dto 생성하기 위해 필요.
          : 상속하는 GraphQL entity의 경우 isAbstract:true 옵션 필요.

@InputType 주의 : 스키마에 동일명의 InputType과 ObjectType이 생성되는 에러 예방.
- isAbstract 옵션: 해당 엔티티로는 ObjectType만 생성. 
                 : 상속을 위해서만 해당 엔티티가 활용된다는 의미. 
                 : GraphQL 스키마에는 포함시키지 말라는 의미.
- 엔티티들 사이에 1대다 관계 등 설정시, @InputType에 별도의 타입명 부여 필요.
  - TypeORM : @ObjectType. 필드들 + CoreEntity를 상속받아 'UserEntity' 생성.
  - GraphQL : @InputType. UserEntity의 필드들만으로 'UserInputType' 생성.

@InputType('UserInputType', { isAbstract: true })  // [참고. DB Relationship/0_InputType & ObjectType.ts]
@ObjectType()  
@Entity()  
export class UserEntity extends CoreEntity { ~ }
================================================================================
[DTO] GraphQL Resolver에서 활용됨.
@InputType: MappedTypes를 통해 엔티티로 dto 생성하기 위해 필요. (extends OmitType, extends PartialType 등)
          : 상속하는 GraphQL entity & 상속받는 dto 양쪽에 @InputType 필요.

cf) @ArgsType: Mapped Types를 통해 entity를 기반으로 dto 클래스 생성 불가. 직접 생성 필요.

@InputType()
export class EditProfileInputDto extends PartialType(
  PickType(UserEntity, ['email', 'password']),
) {}
-------------------------------------------------------------------------------
@ObjectType: 다른 DTO를 상속하여 DTO를 생성하려는 경우 필요. 
             : 상속하는 엔티티/DTO & 상속받는 엔티티/DTO 양쪽에 @ObjectType 필요.

import { Field, ObjectType } from '@nestjs/graphql';

@ObjectType()
export class CoreOutputDto {
  @Field((type) => String, { nullable: true })
  error?: string; // error는 값이 undefined일 수 있기 때문에 선택사항. TS 기능.

  @Field((type) => Boolean)
  ok: boolean;  
}

@ObjectType()
export class CreateAccountOutputDto extends CoreOutputDto {}
================================================================================
[Resolver]
@Args(): 해당 Query/Mutation에서 인자로 DTO를 받을 수 있도록 설정.
       : @InputType로 생성된 DTO 사용하려면 인자로 문자열 설정 필수
       => Args("매개변수명") inputDto: InputDto

@Mutation() 
editProfile( 
  @Args('input') editProfileInput: EditProfileInputDto, 
): Promise<EditProfileOutputDto> { ~ }
================================================================================

