[웹사이트에서 사용자를 기억하는 메커니즘]
- 최초로 사용자가 로그인하게 되면 백엔드는 특정 '문자열'을 브라우저에 보내줌.
- 이후 로그인할 때 해당 '문자열'을 서버로 보냄.
- 해당 '문자열'을 토대로 백엔드는 해당 브라우저를 기억하고, 자동 로그인 과정 진행.
- 그 문자열이 '쿠키'이며, 백엔드의 Session id값이 됨.
- 세션과 세션ID를 통해 요청을 보낸 브라우저==사용자를 인식.

=> 백엔드에는 세션들의 메모리 DB가 구성됨 => 실제 DB에 세션들 저장 필요.

=> 특정 브라우저에서 헤더에 쿠키를 담아 백엔드로 요청을 보내면
   해당 쿠키(=세션ID)를 통해 어떤 세션이 해당 브라우저와 대응되는지 파악 가능.

=====================================================================
세션 : 브라우저별 요청-응답 결과에 대한 기록. history. memory.
- 브라우저와 백엔드 사이의 요청-응답 결과를 기억하는 것. 
- 백엔드에서 특정 브라우저에서 어떤 요청을 보냈는지에 대한 기록.

session 미들웨어 
- express-session
- nestjs-session          // https://www.npmjs.com/package/nestjs-session

cf) If you want to store data directly in Cookie, you can look at [nestjs-cookie-session]

cf) stateless HTTP 프로토콜 : 개별 요청에 대한 응답이 끝나면 브라우저와 서버 사이의 연결은 그대로 끊어짐.

=====================================================================
브라우저들은 쿠키를 header에 담아 백엔드로 그대로 보내도록 설정되어있음.
- req.headers.cookie

브라우저는 '쿠키'라는 데이터 조각들을 저장해 놓았다가, 
동일한 서버에 재 요청 시 저장된 데이터를 함께 전송함. 

쿠키를 통해 두 요청이 동일한 브라우저에서 들어왔는지 아닌지 판단 가능. 
=> 같은 브라우저에서 사용자의 로그인 상태를 유지하는 기능.

cf) https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies
=====================================================================
