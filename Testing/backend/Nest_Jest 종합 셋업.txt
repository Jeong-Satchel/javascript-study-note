Unit Test: Service의 개별 메서드에 대한 테스트. 최대한 구분하여 테스트. 
: 특정 Service를 실제 GraphQL Resolver, TypeORM 등과 구분하여 테스트. 
: 함수의 최종 실행 결과만이 아니라 특정 함수의 개별 코드를 세부적으로 테스트. 
  즉, 함수 실행 과정에서 발생 가능한 모든 경우의 수를 사전 체크. (if-else, try-catch 등) 
: mock, spy 등을 통해 DB와의 상호작용 결과를 가정. 외부 라이브러리 사용을 가정. 
- beforeEach로 개별 메서드별 테스트 모듈 만들어서 진행. (toHaveBeenCalledTimes 테스트 등 누적 카운트 회피 목적) 
  - MailService 테스트할 때는 MailService만 import하여 테스트 모듈 사용. 
- ~.spec.ts 
- npm run test:watch        // spec.ts 파일들 기준으로 테스트 진행. 
- package.json의 "jest" 옵션 셋업 필요. 

=============================== 
npm run test:cov // 수치화. coverage 폴더 생성. 
// Icov-report: 시각적으로 테스트 정도 확인 가능. html, css, js 파일 자동 생성. (istanbul)

=============================== 
E2E: 라우트+요청 방법별 테스트(controller). GraphQL Resolver별 테스트(resolver). 
: TypeOrm SQL 코드로 DB와 상호작용. 별도의 DB 테이블들을 사용하여 데이터 실제로 생성. 
  - pgAdmin4에서 사용할 데이터베이스 별도로 생성하고 환경변수 변경하여 연결.
: 최종적인 실행 결과. End-to-End 테스트. Integration Test라고도 불림. 
: resolver & TypeORM & Service 메서드 모두 제대로 동작하는지 동시에 확인 가능.
- beforeAll로 하나의 테스트 모듈 만들어서 진행. 
  - UsersModule을 테스트할 때 AppModule 전체를 import하여 테스트 모듈 사용. 
  - .env.test의 환경변수 활용하여 AppModule 생성
  - 테스트 종료시 DB 제거 + 테스트 모듈도 제거 필요.
- test/~.e2e-spec.ts 
- npm run test:e2e         // 실행시 jest에서 자체적으로 NODE_ENV=test 대입.
- jest-e2e.json 셋업 필요. 
  
==================================================================
nest g mo ~~
nest g s ~~ // 해당 명령어들로 생성해야 spec.ts 파일도 자동 셋업됨.

app.e2e-spec.ts // nest 프로젝트 생성시 자동 셋업됨.

==================================================================
// [package.json] Unit Test 셋업.
"jest": {
    "moduleNameMapper": {
      "^src/(.*)$": "<rootDir>/$1" // src로 시작하는 모든 경로는 rootDir의 경로로 간주.
    },         // Nest에서 절대경로 방식으로 import 가능 설정한 경우 추가. 
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",   // spec.ts 파일들을 토대로 테스트 진행.
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.service.(t|j)s"    // service.ts 파일들만 테스트 대상으로 지정. (test coverage 관련)
    ],
    "coveragePathIgnorePatterns": [
      "restaurants"           // restaurants 폴더는 제외.
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }

==================================================================
==================================================================
// [jest-e2e.json] E2E Test 셋업.
{
  "moduleFileExtensions": ["js", "json", "ts"],
  "rootDir": ".",
  "testEnvironment": "node",
  "testRegex": ".e2e-spec.ts$",
  "transform": {
    "^.+\\.(t|j)s$": "ts-jest"
  },
  "moduleNameMapper": {
    "^src/(.*)$": "<rootDir>/../src/$1" // 주의: test 폴더에서 나가서 src로 이동해야 함.
    },               // Nest에서 절대경로 방식으로 import 가능 설정한 경우 추가. 
                     // src로 시작하는 모든 경로는 rootDir의 경로로 간주.    
}
=============================================
환경변수: E2E 테스트용 앱모듈로 .env.test 파일의 환경변수 import하기.
- npm run test:e2e 실행시, jest에서 자체적으로 NODE_ENV=test 대입.

// [app.module.ts]
@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,  
      envFilePath: process.env.NODE_ENV === 'dev' ? '.env.dev' : '.env.test',  
      ignoreEnvFile: process.env.NODE_ENV === 'prod', 
      validationSchema: Joi.object({
        NODE_ENV: Joi.string().valid('dev', 'prod', 'test').required(),
        // ~~
      }

// .env.test
DB_NAME=uber-eats-test    // DB명 이외에는 .env.dev와 100% 동일.
                          // 테스트 목적으로 API KEY들 별도로 발급받는 것도 원하면 가능.

// pgAdmin4에서 uber-eats-test 데이터베이스 별도로 생성 필요.

==================================================================